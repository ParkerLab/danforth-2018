#!/usr/bin/env python

from __future__ import print_function

from pprint import pprint
import collections
import os
import sys
import re

csv_files = sys.argv[1:]

# given the CSV files, print a data dictionary

# dictionary format should be:
# LIBRARIES = {
#     'sample_1_unique_id': {
#         'seqcore_id' : '...',
#         'counts' : '...',
#     },
#     'sample_2_unique_id' ....
# }

# unique_id will refer to the seqcore_id

def csv_file_to_sequencing_run(f):
    return re.match('Run_(\d+).csv', os.path.basename(csv_file)).groups(0)[0]


def lane_to_readgroup_name(lane):
    return 'L{:03d}'.format(lane)


def counts_path(seqcore_id):
    counts_dir = os.path.join(os.getenv('DANFORTH_HOME'), 'work', 'master_peaks', 'results', 'master_peaks')
    return os.path.join(counts_dir, '{}.counts.bed'.format(seqcore_id))


LIBRARIES = {}

for csv_file in csv_files:

    header_line = None
    sequencing_run = csv_file_to_sequencing_run(csv_file)

    with open(csv_file, 'r') as f:
        for line in f:
            line_l = line.rstrip().split(',')
            if header_line is None:
                if line_l[0] == 'Lane':
                    header_line = line.rstrip()
                    continue
                else:
                    continue

            parsed_line = dict(zip(header_line.split(','), line_l))  # e.g. d['Lane'] --> 1, d['Sample_ID'] = 'Sample_90470' ...

            seqcore_id = parsed_line['Sample_ID'].replace('Sample_', '')
            unique_id = seqcore_id

            if unique_id not in LIBRARIES:
                sample_information = {
                    'seqcore_id': seqcore_id,
                    'counts': counts_path(seqcore_id)
                }

                LIBRARIES[unique_id] = sample_information


# now print the dictionary
LIBRARIES = collections.OrderedDict(sorted(LIBRARIES.items()))
pprint(dict(LIBRARIES.items()), width=1)
