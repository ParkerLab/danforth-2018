#!/usr/bin/env python

from __future__ import print_function

from pprint import pprint
import collections
import os
import sys
import re

csv_files = sys.argv[1:]
SIZE_FACTORS = os.path.join(os.getenv('DANFORTH_HOME'), 'work', 'rnaseq', 'results', 'size_factors', 'size_factors.txt')

# given the CSV files, print a data dictionary

# dictionary format should be:
# LIBRARIES = {
#     'sample_1_unique_id': {
#         'track_name' : '...',
#         'short_label' : '...',
#         'long_label' : '...',
#         'bam' : '...'
#         'size_factor' : '...'
#     },
#     'sample_2_unique_id' ....
# }

# unique_id will refer to the seqcore_id

def csv_file_to_sequencing_run(f):
    return re.match('Run_(\d+).csv', os.path.basename(csv_file)).groups(0)[0]


def lane_to_readgroup_name(lane):
    return 'L{:03d}'.format(lane)


def fastq_paths(seqcore_id, sequencing_run, readgroup_name, description):
    sequencing_dir = os.path.join(os.getenv('DANFORTH_HOME'), 'data', 'sequencing')
    return [os.path.join(sequencing_dir, 'Run_{1}/fastq/{0}___{0}___{2}___{3}.{4}.fq.gz'.format(seqcore_id, sequencing_run, readgroup_name, description, x)) for x in range(1,3)]


def parse_description(description):
    genotype, replicate = re.match('^(.*)RNAseq(\d)', description).groups()
    if genotype == 'wt':
        genotype = 'WT'
    x = {'genotype' : genotype, 'replicate' : replicate}
    return x

def seqcore_id_to_bam(seqcore_id):
    return os.path.join(os.getenv('DANFORTH_HOME'), 'work', 'rnaseq', 'results', 'star', 'KK{}'.format(seqcore_id), 'Aligned.sortedByCoord.filtered.bam')


LIBRARIES = {}

for csv_file in csv_files:

    header_line = None
    sequencing_run = csv_file_to_sequencing_run(csv_file)

    with open(csv_file, 'r') as f:
        for line in f:
            line_l = line.rstrip().split(',')
            if header_line is None:
                if line_l[0] == 'Lane':
                    header_line = line.rstrip()
                    continue
                else:
                    continue

            parsed_line = dict(zip(header_line.split(','), line_l))  # e.g. d['Lane'] --> 1, d['Sample_ID'] = 'Sample_90470' ...

            seqcore_id = parsed_line['Sample_ID'].replace('Sample_', '')
            unique_id = seqcore_id
            track_name = 'KK{}_{}'.format(sequencing_run, seqcore_id)
            short_label = '{genotype} RNA-seq'.format(**parse_description(parsed_line['Description']))
            long_label = 'Stranded RNA-seq, {genotype} mouse {replicate}'.format(**parse_description(parsed_line['Description']))
            bam = seqcore_id_to_bam(seqcore_id)

            if unique_id not in LIBRARIES:
                sample_information = {
                    'track_name': track_name,
                    'short_label': short_label,
                    'long_label': long_label,
                    'bam': bam
                }

                LIBRARIES[unique_id] = sample_information

# parse the size factors
if not os.path.exists(SIZE_FACTORS):
    sys.stderr.write("No size factors file; can't normalize the bigwig tracks. Exiting.")
    sys.exit(1)

with open(SIZE_FACTORS, 'r') as f:
    for line in f:
        line = line.rstrip().split()
        if line[0] == 'sample.id':  # header line...
            continue
        else:
            sample_id, size_factor = line
            sample_id = sample_id.replace('KK', '')
            if sample_id in LIBRARIES:
               LIBRARIES[sample_id]['size_factor'] = size_factor


# now print the dictionary
LIBRARIES = collections.OrderedDict(sorted(LIBRARIES.items()))
pprint(dict(LIBRARIES.items()), width=1)
