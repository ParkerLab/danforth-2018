#!/usr/bin/env python

#
# This commands template needs customization wherever you see CHANGES
# REQUIRED. Where you see CHANGES RECOMMENDED, check that section to
# make sure it works for your pipeline.
#

from __future__ import print_function

import functools
import itertools
import os
import re

from john_utilities import mkdir, symlink
from load_pprint_dict import load_pprint_dict

ROOT = os.getenv('DANFORTH_HOME')

ANALYSIS_PATH = os.path.join(ROOT, 'work', "differential_gene_expression")
WORK_PATH = os.path.join(ANALYSIS_PATH, 'results')
PIPELINE = os.path.join(ANALYSIS_PATH, 'pipeline')

COUNTS_DIR = os.path.join(WORK_PATH, 'counts')
DESEQ2_DIR = os.path.join(WORK_PATH, 'deseq2')


#
# Library dictionary
#

DATA = load_pprint_dict('libraries')


def print_to_pipeline(pipeline_file, text=None, timed=False, ioniced=False):
    """The primary function of all this: writing to a drmr script."""
    if text:
        if timed:
            pipeline_file.write('/usr/bin/time -v ')
        if ioniced:
            pipeline_file.write('ionice -c 2 -n 7 ')
        pipeline_file.write(text)
        pipeline_file.write('\n')


def get_counts(library_name):
    return DATA[library_name]['counts']


def deseq2():
    printp("""# drmr:label deseq2\n""")
    printp("""\n# drmr:job working_directory={} processors=1 time_limit=1h memory=5g\n""".format(DESEQ2_DIR))

    src = os.path.join(ROOT, 'src')
    counts_dir = COUNTS_DIR
    sample_info = os.path.join(ROOT, 'sample_information', 'sample_info.txt')
    covariates = ','.join(['somites'])
    prefix = 'differential_gene_expression'
    template = 'Rscript {src}/differential_gene_expression.R --counts_dir {counts_dir} --sample_info {sample_info} --covariates {covariates} --prefix {prefix}'
    printp(template.format(**locals()))
    
    printp("""\n# drmr:wait""")
    

if __name__ == '__main__':
    mkdir(WORK_PATH)
    mkdir(COUNTS_DIR)
    mkdir(DESEQ2_DIR)

    if os.path.exists(PIPELINE):
        os.unlink(PIPELINE)

    PIPELINE_FILE = open(PIPELINE, 'w')
    printp = functools.partial(print_to_pipeline, PIPELINE_FILE)

    printp('#!/bin/bash')
    printp('# -*- mode: sh; coding: utf-8 -*-\n')


    for library_name in DATA:
        symlink(get_counts(library_name), os.path.join(COUNTS_DIR, '{}.geneCounts.txt.gz'.format(library_name)), abs = True)

    deseq2()
