#!/usr/bin/env python

from __future__ import print_function

from pprint import pprint
import collections
import os
import sys
import re

csv_files = sys.argv[1:] # from the sequencing core

# given the CSV files, print a data dictionary containing sample/library information
# each key represents a sample/library
# each value is a dictionary including the following:
# 'counts': path to the file of gene read counts, formatted for DESeq2


def lane_to_readgroup_name(lane):
    return 'L{:03d}'.format(lane)


def counts_path(seqcore_id):
    qorts_dir = os.path.join(os.getenv('DANFORTH_HOME'), 'work', 'rnaseq', 'results', 'qorts')
    return os.path.join(qorts_dir, 'KK{}/QC.geneCounts.formatted.for.DESeq.txt.gz'.format(seqcore_id))


LIBRARIES = {}

for csv_file in csv_files:

    header_line = None

    with open(csv_file, 'r') as f:
        for line in f:
            line_l = line.rstrip().split(',')
            if header_line is None:
                if line_l[0] == 'Lane':
                    header_line = line.rstrip()
                    continue
                else:
                    continue

            parsed_line = dict(zip(header_line.split(','), line_l))  # e.g. d['Lane'] --> 1, d['Sample_ID'] = 'Sample_90470' ...

            seqcore_id = parsed_line['Sample_ID'].replace('Sample_', '')
            unique_id = seqcore_id

            if unique_id not in LIBRARIES:
                sample_information = {
                    'counts': counts_path(seqcore_id)
                }

                LIBRARIES[unique_id] = sample_information


# now print the dictionary
LIBRARIES = collections.OrderedDict(sorted(LIBRARIES.items()))
pprint(dict(LIBRARIES.items()), width=1)
