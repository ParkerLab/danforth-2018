#!/usr/bin/env python

from __future__ import print_function

from pprint import pprint
import collections
import os
import sys
import re

csv_files = sys.argv[1:]  # paths to the CSV files from the sequencing core

# given the CSV files from the sequencing core, print a data dictionary that will provide sample/library information to the commands script that generates the pipeline
# each key in the dictionary should have the following values:
# 'genome', representing the genome to which the sequencing reads should be mapped
# 'readgroups', containing a dictionary in which each key is a readgroup name and each value is a list of the 2 fastq files that belong to that readgroup


def csv_file_to_sequencing_run(f):
    return re.match('Run_(\d+).csv', os.path.basename(csv_file)).groups(0)[0]


def lane_to_readgroup_name(lane):
    return 'L{:03d}'.format(lane)


def fastq_paths(seqcore_id, sequencing_run):
    sequencing_dir = os.path.join(os.getenv('DANFORTH_HOME'), 'data', 'sequencing')
    return [os.path.join(sequencing_dir, 'Run_{1}/fastq/KK{1}_{0}_{2}.fastq.gz'.format(seqcore_id, sequencing_run, x)) for x in range(1,3)]


LIBRARIES = {}

for csv_file in csv_files:

    header_line = None
    sequencing_run = csv_file_to_sequencing_run(csv_file)

    with open(csv_file, 'r') as f:
        for line in f:
            line_l = line.rstrip().split(',')
            if header_line is None:
                if line_l[0] == 'Lane':
                    header_line = line
                    continue
                else:
                    continue

            parsed_line = dict(zip(header_line.split(','), line_l))  # e.g. d['Lane'] --> 1, d['Sample_ID'] = 'Sample_90470' ...

            seqcore_id = parsed_line['Sample_ID'].replace('Sample_', '')
            unique_id = seqcore_id
            genome = 'mm9'

            if unique_id not in LIBRARIES:
                sample_information = {
                    'genome': genome,
                    'readgroups': {}
                }

                LIBRARIES[unique_id] = sample_information


            readgroup_name = lane_to_readgroup_name(int(parsed_line['Lane']))
            assert(readgroup_name not in LIBRARIES[unique_id]['readgroups'])
            LIBRARIES[unique_id]['readgroups'][readgroup_name] = fastq_paths(seqcore_id, sequencing_run)


# now print the dictionary
LIBRARIES = collections.OrderedDict(sorted(LIBRARIES.items()))
pprint(dict(LIBRARIES.items()), width=1)
