#!/usr/bin/env python

from __future__ import print_function

from pprint import pprint
import collections
import os
import sys
import re

csv_files = sys.argv[1:]

# given the CSV files, print a data dictionary

# dictionary format should be:
# LIBRARIES = {
#     'sample_1_unique_id': {
#         'seqcore_id' : '...',
#         'sequencing_run' : '...',
#         'genome' : '...',
#         'strand' : '...', # library strand information, for STAR
#         'readgroups' : {
#             'first_readgroup_name' : ['fastq_1_path', 'fastq_2_path']
#         }
#     },
#     'sample_2_unique_id' ....
# }

# unique_id will refer to the seqcore_id

def csv_file_to_sequencing_run(f):
    return re.match('Run_(\d+).csv', os.path.basename(csv_file)).groups(0)[0]


def lane_to_readgroup_name(lane):
    return 'L{:03d}'.format(lane)


def fastq_paths(seqcore_id, sequencing_run, readgroup_name, description):
    sequencing_dir = os.path.join(os.getenv('DANFORTH_HOME'), 'data', 'sequencing')
    return [os.path.join(sequencing_dir, 'Run_{1}/fastq/{0}___{0}___{2}___{3}.{4}.fq.gz'.format(seqcore_id, sequencing_run, readgroup_name, description, x)) for x in range(1,3)]


LIBRARIES = {}

for csv_file in csv_files:

    header_line = None
    sequencing_run = csv_file_to_sequencing_run(csv_file)

    with open(csv_file, 'r') as f:
        for line in f:
            line_l = line.rstrip().split(',')
            if header_line is None:
                if line_l[0] == 'Lane':
                    header_line = line.rstrip()
                    continue
                else:
                    continue

            parsed_line = dict(zip(header_line.split(','), line_l))  # e.g. d['Lane'] --> 1, d['Sample_ID'] = 'Sample_90470' ...

            seqcore_id = parsed_line['Sample_ID'].replace('Sample_', '')
            unique_id = 'KK' + seqcore_id  # QoRTs runs into problems if the IDs for each sample look like integers
            genome = os.getenv('DANFORTH_RNASEQ_GENOME') # 'mm9' or 'danforth'

            if unique_id not in LIBRARIES:
                sample_information = {
                    'sequencing_run': sequencing_run,
                    'genome': genome,
                    'readgroups': {},
                    'strand': 'fr-firststrand'
                }

                LIBRARIES[unique_id] = sample_information


            readgroup_name = lane_to_readgroup_name(int(parsed_line['Lane']))
            assert(readgroup_name not in LIBRARIES[unique_id]['readgroups'])
            LIBRARIES[unique_id]['readgroups'][readgroup_name] = fastq_paths(seqcore_id, sequencing_run, readgroup_name, parsed_line['Description'])


# now print the dictionary
LIBRARIES = collections.OrderedDict(sorted(LIBRARIES.items()))
pprint(dict(LIBRARIES.items()), width=1)
